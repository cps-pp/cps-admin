import { useForm } from 'react-hook-form';
import Button from '@/components/Button';
import Input from '@/components/Forms/Input';
import DatePicker from '@/components/DatePicker_two';
import Select from '@/components/Forms/Select';
import React, { useState, useEffect, useRef } from 'react'; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° useRef
import { openAlert } from '@/redux/reducer/alert';
import { useAppDispatch } from '@/redux/hook';
import Alerts from '@/components/Alerts';
import Loader from '@/common/Loader';
import InputBox from '../../../components/Forms/Input_new';
import SelectBox from '../../../components/Forms/Select';
import ButtonBox from '../../../components/Button';
import BoxDate from '../../../components/Date';
import { usePrompt } from '@/hooks/usePrompt';

const CreatePatient = ({
  setShow,
  getList,
  existingIds,
  existingPhones1,
  existingPhones2,
  onCloseCallback,
}) => {
  const [loading, setLoading] = useState(false);
  const dispatch = useAppDispatch();
  const [loadingNextId, setLoadingNextId] = useState(true);
  const [nextPatientId, setNextPatientId] = useState('');
  const [phoneNumber1, setPhoneNumber1] = useState('020'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 1
  const [phoneNumber2, setPhoneNumber2] = useState('020'); // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 2

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    setFocus,
    watch,
    formState: { isDirty, errors },
  } = useForm();
const dob = watch('dob');

  // ‚úÖ ‡πÉ‡∏ä‡πâ useRef ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö current value ‡∏Ç‡∏≠‡∏á isDirty
  const isDirtyRef = useRef(isDirty);

  // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï ref ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà isDirty ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    isDirtyRef.current = isDirty;
  }, [isDirty]);

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ navigation (Back / ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô route)
  usePrompt(
    '‡∫ó‡ªà‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫≠‡∫≠‡∫Å‡∫à‡∫≤‡∫Å‡ªú‡ªâ‡∫≤‡∫ô‡∫µ‡ªâ‡ªÅ‡∫ó‡ªâ‡∫´‡∫º‡∫∑‡∫ö‡ªç? ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫∞‡∫™‡∫π‡∫ô‡ªÄ‡∫™‡∫ç.',
    isDirty,
  );

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏à‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä / ‡∏õ‡∏¥‡∏î‡πÅ‡∏ó‡πá‡∏ö
  useEffect(() => {
    const handleBeforeUnload = (event) => {
      if (!isDirtyRef.current) return;
      event.preventDefault();
      event.returnValue = '';
    };

    window.addEventListener('beforeunload', handleBeforeUnload);
    return () => {
      window.removeEventListener('beforeunload', handleBeforeUnload);
    };
  }, []);

  // ‚úÖ ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏° - ‡πÉ‡∏ä‡πâ current value ‡∏à‡∏≤‡∏Å ref
  const handleCloseForm = () => {
    if (isDirtyRef.current) {
      const confirmLeave = window.confirm(
        '‡∫ó‡ªà‡∫≤‡∫ô‡∫ï‡ªâ‡∫≠‡∫á‡∫Å‡∫≤‡∫ô‡∫õ‡∫¥‡∫î‡∫ü‡∫≠‡∫°‡ªÅ‡∫ó‡ªâ‡∫´‡∫º‡∫∑‡∫ö‡ªç? ‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫ó‡∫µ‡ªà‡∫õ‡ªâ‡∫≠‡∫ô‡∫à‡∫∞‡∫™‡∫π‡∫ô‡ªÄ‡∫™‡∫ç',
      );
      if (!confirmLeave) return;
    }
    setShow(false);
  };

  // ‚úÖ ‡∏™‡πà‡∏á handleCloseForm ‡πÑ‡∏õ‡πÉ‡∏´‡πâ parent component ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    if (onCloseCallback) {
      onCloseCallback(() => handleCloseForm);
    }
  }, [onCloseCallback]);

  // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useEffect ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  useEffect(() => {
    setValue('phone1', '020', { shouldValidate: false, shouldDirty: false });
    setValue('phone2', '020', { shouldValidate: false, shouldDirty: false });
    // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ local state ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö form
    setPhoneNumber1('020');
    setPhoneNumber2('020');
  }, [setValue]);

  const [gender, setGender] = useState('');

  // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    const fetchNextId = async () => {
      try {
        setLoadingNextId(true);
        const response = await fetch(
          'http://localhost:4000/src/manager/next-patient-id',
        );

        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }

        const data = await response.json();
        setNextPatientId(data.nextId);
        setValue('patient_id', data.nextId); // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      } catch (error) {
        console.error('Error fetching next ID:', error);
        dispatch(
          openAlert({
            type: 'error',
            title: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
            message: '‡∫ö‡ªç‡ªà‡∫™‡∫≤‡∫°‡∫≤‡∫î‡∫î‡∫∂‡∫á‡∫•‡∫∞‡∫´‡∫±‡∫î‡ªÉ‡ªù‡ªà‡ªÑ‡∫î‡ªâ',
          }),
        );
      } finally {
        setLoadingNextId(false);
      }
    };

    fetchNextId();
  }, [dispatch, setValue]);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 1 - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  const handlePhone1Change = (e) => {
    let value = e.target.value;

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö "020" ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "020"
    if (!value.startsWith('020')) {
      value = '020';
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numericValue = value.replace(/[^0-9]/g, '');

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 4 (‡∏´‡∏•‡∏±‡∏á 020) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 2, 5, 7, ‡∏´‡∏£‡∏∑‡∏≠ 9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (numericValue.length >= 4) {
      const fourthDigit = numericValue.charAt(3);
      if (!['2', '5', '7', '9'].includes(fourthDigit)) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 4 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ó‡∏ô (‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state)
        return;
      }
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 11 ‡∏ï‡∏±‡∏ß (020 + 8 ‡∏ï‡∏±‡∏ß)
    if (numericValue.length <= 11) {
      setPhoneNumber1(numericValue); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ state ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô react-hook-form ‡∏î‡πâ‡∏ß‡∏¢
      setValue('phone1', numericValue, {
        shouldValidate: true,
        shouldDirty: true,
      }); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ field
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ 2 - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
  const handlePhone2Change = (e) => {
    let value = e.target.value;

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏•‡∏ö "020" ‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "020"
    if (!value.startsWith('020')) {
      value = '020';
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    const numericValue = value.replace(/[^0-9]/g, '');

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 4 (‡∏´‡∏•‡∏±‡∏á 020) ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô 2, 5, 7, ‡∏´‡∏£‡∏∑‡∏≠ 9 ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    if (numericValue.length >= 4) {
      const fourthDigit = numericValue.charAt(3);
      if (!['2', '5', '7', '9'].includes(fourthDigit)) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 4 ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ó‡∏ô (‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó state)
        return;
      }
    }

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 11 ‡∏ï‡∏±‡∏ß (020 + 8 ‡∏ï‡∏±‡∏ß)
    if (numericValue.length <= 11) {
      setPhoneNumber2(numericValue); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ state ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      // ‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô react-hook-form ‡∏î‡πâ‡∏ß‡∏¢
      setValue('phone2', numericValue, {
        shouldValidate: true,
        shouldDirty: true,
      }); // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ field
    }
  };

  const handleSave = async (data) => {
    setLoading(true);

    if (existingIds.includes(data.patient_id)) {
      setFocus('patient_id'); // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false); // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (existingPhones1.includes(data.phone1)) {
      setFocus('phone1'); // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ô‡∫µ‡ªâ ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false); // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (existingPhones2.includes(data.phone2)) {
      setFocus('phone2'); // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ô‡∫µ‡ªâ ‡∫°‡∫µ‡ªÉ‡∫ô‡∫•‡∫∞‡∫ö‡∫ª‡∫ö‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setLoading(false); // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£

    } else if (data.phone1 === data.phone2) {
      setFocus('phone2'); // ‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏£‡∏´‡∏±‡∏™‡∏Ñ‡∏ô‡πÄ‡∏à‡πá‡∏ö
      dispatch(
        openAlert({
          type: 'error',
          title: '‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫Å‡∫∞‡∫•‡∫∏‡ªÉ‡∫™‡ªÄ‡∫ö‡∫µ‡ªÇ‡∫ó‡∫ö‡ªç‡ªà‡ªÉ‡∫´‡ªâ‡∫ä‡∫≥‡ªâ‡∫Å‡∫±‡∫ô',
        }),
      );
      setLoading(false); // üõë ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏¢‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏≠‡∏¢‡∏π‡πà
      return; // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
    }

    try {
      const response = await fetch(
        'http://localhost:4000/src/manager/patient',
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ ...data, gender }),
        },
      );

      const result = await response.json();

      if (!response.ok) {
        throw new Error(result.error || '‡∫ö‡∫±‡∫ô‡∫ó‡∫∑‡∫Å‡∫ö‡ªç‡ªà‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î');
      }

      dispatch(
        openAlert({
          type: 'success',
          title: '‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î',
          message: '‡∫ö‡∫±‡∫ô‡∫ó‡∫∑‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô‡∫™‡∫≥‡ªÄ‡∫•‡∫±‡∫î‡ªÅ‡∫•‡ªâ‡∫ß',
        }),
      );
      setShow(false);
      await getList();
      reset();
    } catch (error) {
      dispatch(
        openAlert({
          type: 'error',
          title: '‡ªÄ‡∫Å‡∫µ‡∫î‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î',
          message: '‡∫°‡∫µ‡∫Ç‡ªç‡ªâ‡∫ú‡∫¥‡∫î‡∫û‡∫≤‡∫î‡ªÉ‡∫ô‡∫Å‡∫≤‡∫ô‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô',
        }),
      );
    } finally {
      setLoading(false);
    }
  };

  if (loading || loadingNextId) return <Loader />;

  return (
    <div className="rounded bg-white pt-4 dark:bg-boxdark">
      <Alerts />

      <div className="flex items-center border-b border-stroke dark:border-strokedark pb-4">
        <h1 className="text-md md:text-lg lg:text-xl font-medium text-strokedark dark:text-bodydark3 px-4">
          ‡ªÄ‡∫û‡∫µ‡ªà‡∫°‡∫Ç‡ªç‡ªâ‡∫°‡∫π‡∫ô
        </h1>
      </div>

      <form
        onSubmit={handleSubmit(handleSave)}
        className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 mt-4 px-4"
      >
        {/* ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÅ‡∏ö‡∏ö read-only) */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2 text-black dark:text-white">
            ‡∫•‡∫∞‡∫´‡∫±‡∫î‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö
          </label>
          <input
            type="text"
            value={nextPatientId}
            readOnly
            className="w-full rounded border-[1.5px] border-stroke bg-gray-100 py-3 px-5 text-black outline-none dark:border-form-strokedark dark:bg-gray-700 dark:text-white cursor-not-allowed"
          />
          {/* Hidden input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏õ‡∏Å‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° */}
          <input type="hidden" {...register('patient_id')} />
        </div>

        <InputBox
          label="‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö"
          name="patient_name"
          type="text"
          placeholder="‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∂‡ªà"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ä‡∫∑‡ªà‡∫Ñ‡∫ª‡∫ô‡ªÄ‡∫à‡∫±‡∫ö‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô"
          name="patient_surname"
          type="text"
          placeholder="‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ô‡∫≤‡∫°‡∫™‡∫∞‡∫Å‡∫∏‡∫ô‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />

        <SelectBox
          label="‡ªÄ‡∫û‡∫î"
          name="‡ªÄ‡∫û‡∫î"
          options={['‡∫ä‡∫≤‡∫ç', '‡∫ç‡∫¥‡∫á']}
          register={register}
          errors={errors}
          value={gender}
          onSelect={(e) => setGender(e.target.value)}
        />

        <BoxDate
          select={dob}
          register={register}
          errors={errors}
          name="dob"
          label="‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫¥‡ªÄ‡∫Å‡∫µ‡∫î"
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡ªÉ‡∫™‡ªà‡∫ß‡∫±‡∫ô‡ªÄ‡∫î‡∫∑‡∫≠‡∫ô‡∫õ‡∫µ‡ªÄ‡∫Å‡∫µ‡∫î' }}
          setValue={setValue}
        />

        {/* ‚úÖ Custom Phone Input 1 with 020 prefix - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2 text-black dark:text-white">
            ‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà 1
          </label>
          <input
            type="tel"
            value={phoneNumber1}
            onChange={handlePhone1Change}
            placeholder="0202xxxxxxx, 0205xxxxxxx, 0207xxxxxxx, 0209xxxxxxx"
            className="w-full rounded border-[1.5px] border-stroke bg-transparent py-3 px-5 text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
          {/* Hidden input for form validation */}
          <input
            type="hidden"
            {...register('phone1', {
              required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫Å‡ªà‡∫≠‡∫ô',
              validate: {
                validLength: (value) => {
                  if (value.length !== 11) {
                    return '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ 11 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å (020 + 8 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å)';
                  }
                  return true;
                },
                startsWithPrefix: (value) => {
                  if (!value.startsWith('020')) {
                    return '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô‡∫î‡ªâ‡∫ß‡∫ç 020';
                  }
                  return true;
                },
                validFourthDigit: (value) => {
                  if (value.length >= 4) {
                    const fourthDigit = value.charAt(3);
                    if (!['2', '5', '7', '9'].includes(fourthDigit)) {
                      return '‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ 4 ‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô 2, 5, 7, ‡∫´‡∫º‡∫∑ 9 ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô';
                    }
                  }
                  return true;
                },
              },
            })}
          />
          {errors.phone1 && (
            <p className="text-red-500 text-sm mt-1">{errors.phone1.message}</p>
          )}
        </div>

        {/* ‚úÖ Custom Phone Input 2 with 020 prefix - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß */}
        <div className="mb-4">
          <label className="block text-sm font-medium mb-2 text-black dark:text-white">
            ‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà 2
          </label>
          <input
            type="tel"
            value={phoneNumber2}
            onChange={handlePhone2Change}
            placeholder="0202xxxxxxx, 0205xxxxxxx, 0207xxxxxxx, 0209xxxxxxx"
            className="w-full rounded-lg border-[1.5px] border-stroke bg-transparent py-3 px-5 text-black outline-none transition focus:border-primary active:border-primary disabled:cursor-default disabled:bg-whiter dark:border-form-strokedark dark:bg-form-input dark:text-white dark:focus:border-primary"
          />
          {/* Hidden input for form validation */}
          <input
            type="hidden"
            {...register('phone2', {
              required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫Å‡ªà‡∫≠‡∫ô',
              validate: {
                validLength: (value) => {
                  if (value.length !== 11) {
                    return '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡∫°‡∫µ 11 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å (020 + 8 ‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å)';
                  }
                  return true;
                },
                startsWithPrefix: (value) => {
                  if (!value.startsWith('020')) {
                    return '‡ªÄ‡∫ö‡∫µ‡∫ï‡∫¥‡∫î‡∫ï‡ªç‡ªà‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫•‡∫µ‡ªà‡∫°‡∫ï‡∫ª‡ªâ‡∫ô‡∫î‡ªâ‡∫ß‡∫ç 020';
                  }
                  return true;
                },
                validFourthDigit: (value) => {
                  if (value.length >= 4) {
                    const fourthDigit = value.charAt(3);
                    if (!['2', '5', '7', '9'].includes(fourthDigit)) {
                      return '‡∫ï‡∫ª‡∫ß‡ªÄ‡∫•‡∫Å‡∫ó‡∫µ 4 ‡∫ï‡ªâ‡∫≠‡∫á‡ªÄ‡∫õ‡∫±‡∫ô 2, 5, 7, ‡∫´‡∫º‡∫∑ 9 ‡ªÄ‡∫ó‡∫ª‡ªà‡∫≤‡∫ô‡∫±‡ªâ‡∫ô';
                    }
                  }
                  return true;
                },
              },
            })}
          />
          {errors.phone2 && (
            <p className="text-red-500 text-sm mt-1">{errors.phone2.message}</p>
          )}
        </div>

        <InputBox
          label="‡∫ö‡ªâ‡∫≤‡∫ô"
          name="village"
          type="text"
          placeholder="‡∫ö‡ªâ‡∫≤‡∫ô"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡∫ö‡ªâ‡∫≤‡∫ô‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡ªÄ‡∫°‡∫∑‡∫≠‡∫á"
          name="district"
          type="text"
          placeholder="‡ªÄ‡∫°‡∫∑‡∫≠‡∫á"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÄ‡∫°‡∫∑‡∫≠‡∫á‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />
        <InputBox
          label="‡ªÅ‡∫Ç‡∫ß‡∫á"
          name="province"
          type="text"
          placeholder="‡ªÅ‡∫Ç‡∫ß‡∫á"
          register={register}
          formOptions={{ required: '‡∫Å‡∫∞‡∫•‡∫∏‡∫ô‡∫≤‡∫õ‡ªâ‡∫≠‡∫ô‡ªÅ‡∫Ç‡∫ß‡∫á‡∫Å‡ªà‡∫≠‡∫ô' }}
          errors={errors}
        />

        <div className="mt-4 flex justify-end space-x-4 col-span-full py-4">

          <ButtonBox variant="save" type="submit" disabled={loading}>
            {loading ? '‡∫Å‡∫≥‡∫•‡∫±‡∫á‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å...' : '‡∫ö‡∫±‡∫ô‡∫ó‡∫∂‡∫Å'}
          </ButtonBox>
        </div>
      </form>
    </div>
  );
};

export default CreatePatient;
